 # -*- coding: utf-8 -*-
"""WhisperX_Speaker_Diarization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IHum-j2AOjVOs_ZoqJ5yBUjf1kI4SLmt
"""
import os

 # !pip install --q git+https://github.com/m-bain/whisperx.git

import whisperx
import pandas as pd
from tkinter import filedialog

# HUGGINGFACE_TOKEN=''
language='nl'

device = "cpu"
batch_size = 4 # reduce if low on GPU mem
compute_type = "int8" # change to "int8" if low on GPU mem (may reduce accuracy)

audio_file = filedialog.askopenfilename(filetypes=(("Audio Files", ".wav .mp3 .ogg"),   ("All Files", "*.*")))

# with open(audio_file_path, "rb") as audio_file:
rel_audio_file= os.path.relpath(audio_file)

audio = whisperx.load_audio(rel_audio_file)

model = whisperx.load_model("large-v2", device, compute_type=compute_type)

result = model.transcribe(audio, batch_size=batch_size)
# print(result["segments"]) # before alignment

# delete model if low on GPU resources
# import gc; gc.collect(); torch.cuda.empty_cache(); del model

# 2. Align whisper output
model_a, metadata = whisperx.load_align_model(language_code=result["language"], device=device)
result = whisperx.align(result["segments"], model_a, metadata, audio, device, return_char_alignments=False)

# result

diarize_model = whisperx.DiarizationPipeline(use_auth_token=HUGGINGFACE_TOKEN,
                                             device=device)

diarize_segments = diarize_model(audio, min_speakers=1, max_speakers=10)

# diarize_segments

diarize_segments.speaker.unique()

result = whisperx.assign_word_speakers(diarize_segments, result)
# print(diarize_segments)
# print(result["segments"]) # segments are now assigned speaker IDs

# diarize_segments

# Convert result['segments'] into a DataFrame
df_segments = pd.DataFrame(result['segments'])

# Save to an Excel file
# file = asksaveasfile(filetypes = files, defaultextension = files)
# df_segments.to_excel("result_segments.xlsx", sheet_name='Diarization_results', index=False)
filePath = filedialog.asksaveasfilename(defaultextension='.xlsx')
file_path=os.path.dirname(os.path.abspath(filePath))+"\\result_segments.xlsx"
df_segments.to_excel(file_path, sheet_name='Diarization_results', index=False)




